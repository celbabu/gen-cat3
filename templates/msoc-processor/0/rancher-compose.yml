version: '2'
services:
  msoc-geodecimator:
    scale: 1
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      port: 9000
      unhealthy_threshold: 3
      initializing_timeout: 120000
      interval: 30000
      strategy: recreate
      request_line: GET "/healthcheck" "HTTP/1.0"
      reinitializing_timeout: 120000

  msoc-rest-webservice:
    scale: 1
    start_on_create: true
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      port: 80
      unhealthy_threshold: 3
      initializing_timeout: 60000
      interval: 2000
      strategy: recreate
      reinitializing_timeout: 60000

  mongodb:
    scale: 1
    start_on_create: true
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      port: 27017
      unhealthy_threshold: 3
      initializing_timeout: 60000
      interval: 2000
      strategy: recreate
      reinitializing_timeout: 60000

  msoc-processor:
    scale: 1
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      port: 9000
      unhealthy_threshold: 3
      initializing_timeout: 120000
      interval: 30000
      strategy: recreate
      request_line: GET "/healthcheck" "HTTP/1.0"
      reinitializing_timeout: 120000

catalog:
  name: "msoc-processor"
  version: "1.0.2"
  description: "A geodecimator description"
  minimum_rancher_version: v0.51.0
  upgarde_from: "<1.0.2"
  questions:
    - variable: application_id
      label: "Application Id"
      required: true
      type: "string"
      description: "An alphanumeric string that uniquely identifies this application instance. WARNING: Applications deployed with the same Application ID that consume data from the same Kafka topic will have data split between them. See the Kafka documentation for APPLICATION_ID for further explanation." 
    - variable: kafka_service
      description: "Kafka Stack/Service."
      label: "Kafka Broker to Connect to."
      required: false
      type: "service"
    - variable: schema_registry_service
      description: "Confluent Schema Registry Service."
      label: "Schema Registry"
      required: false
      type: "service"
    - variable: bootstap_servers_config
      label: "Kafka Bootstrap Server"
      required: true
      type: "string"
      default: "kafka:29092"
    - variable: schema_registry_url
      label: "Schema Registry URL"
      required: true
      type: "string"
      default: "http://schema-registry:8081"
      description: "URL to a Confluent Schema Registry"
    - variable: kafka_input_topics
      label: "Kafka Input Topic(s)"
      required: true
      type: "string"
      description: "A kafka topic name (or comma seperated list) used for input data. Topic must contain MaritimeContact Avro messages."
    - variable: kafka_output_topic
      label: "Kafka Output Topic"
      required: true
      type: "string"
      description: "The destination topic for data output by the geodecimator. This is then read by the processor service."
    - variable: geodecimator_window_ms
      label: "Decimation Window"
      description: "The target update rate per track in milliseconds."
      required: true
      type: "int"
    - variable: geodecimator_expiry_ms
      label: "Decimation Expiry"
      description: "Defines how often a cleanup job is scheduled to run on the Key/Value store. This cleanup will clear out old entries. It must be greater than the value defined for Decimation Window, and it is reccomended that it be twice (2x) this value. For bulk loading of historicatl data, the window must be greater than or equal to the entire timeframe covered by the bulk data."
      required: true
      type: "int"
    - variable: geodecimator_polygon
      label: "Filter Polygon"
      required: false
      type: "string"
      description: "If defined, the geodecimator microservice will filter out all MaritimeContact reports that do not fall within the bounds of this polygon. The polygon is represented as an array of coordinates; The first pair and last pair of coordinates *must* match in order for the polygon to be considered closed. Eg. [[0, 0], [10, 10], [10, 0], [0, 0]]"
    - variable: webservice_port
      label: "REST Webservice Listen Port"
      default: 4040
      required: true
      type: "int"
      description: "The port that the REST webserice will listen on for incomming REST requests."
    - variable: num_stream_threads
      label: "Number Of Stream Threads"
      default: 1
      required: true
      type: "int"
      description: "The number of KStreams consumer threads to run. This value should be less than or equal to the number of partitions on the source kafka topic(s). (assuming a single instance of this microservice is running). If this value is set to 1 and there are 10 partitions on the source topic, all 10 partitions will be assigned to 1 thread; Records will be processed synchronously. If this value is set to 10 and there is only 1 partition on the source topic, then 9 threads will sit idle while 1 thread will process all records synchronously. Parallelism can only be acheived if the topic has >1 partition *AND* this value is >1."
    - variable: auto_offset_reset
      label: "Auto Offset Reset"
      required: true
      type: "enum"
      options:
        - latest
        - earliest
      default: "latest"
      description: "This determines where this application will start reading from on the input Kafak Topic on first startup. Once an application registers as a consumer on a topic, the read offset is tracked by Application Id."
    - variable: logging_level
      label: "The Log4J Logging Level"
      required: true
      type: "enum"
      options:
        - ALL
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - FATAL
        - OFF
        - TRACE
      default: "INFO"
      description: "See Log4J documentation for further explanation of these levels."
